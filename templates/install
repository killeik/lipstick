#!/usr/bin/env bash

# TEMPLATE PROTECTOR START.
echo 'This is a template. Run the build script to create actual install script.'
exit 1
# TEMPLATE PROTECTOR END.

######################################################################
#
# Console Colour Scheme Sync (c2s2) Installation Script.
#
# 1. Adds c2s2-monitor, c2s2-update, c2s2-enable, and c2s2-disable
#    scripts to ~/.local/bin
# 2. Adds light and dark configuration scripts to ~/.config/c2s2
# 3. Adds systemd unit file to ~/.config/systemd/user
# 4. Enables the systemd service and starts it.
#
# For more information, usage instructions, and app configurations,
# please see: https://codeberg.org/small-tech/c2s2
#
# Like this? Fund us! https://small-tech.org/fund-us
#
# Copyright Â© 2022-present Aral Balkan, Small Technology Foundation
# Released under AGPL version 3.0.
#
######################################################################

echo "Installing Console Colour Scheme Sync (c2s2)â€¦"
echo ""

# Scripts.

scripts=()

# Monitor script.

read -rd '' monitorScript <<-EOF
<<insert-c2s2-monitor-script>>
EOF
scripts+=("${monitorScript}")

# Update script.

read -rd '' updateScript <<-EOF
#!/usr/bin/env bash

if [[ "\${1}" == "default" ]]; then
  # Activate light theme configuration.
  source "\${HOME}/.config/c2s2/light"
else
  # Activate dark theme configuration.
  source "\${HOME}/.config/c2s2/dark"
fi
EOF
scripts+=("${updateScript}")

# Enable script.

read -rd '' enableScript <<-EOF
#!/usr/bin/env bash

# Enable the c2s2 colour scheme change monitor to start on boot,
# start it up immediately, and also run the update command right away.

"${HOME}/.local/bin/c2s2-update"
systemctl --user enable c2s2.service
systemctl --user start c2s2.service
EOF
scripts+=("${enableScript}")

# Disable script.

read -rd '' disableScript <<-EOF
#!/usr/bin/env bash

# Stop the c2s2 colour scheme change monitor service immediately and
# disable it from starting at boot.

systemctl --user stop c2s2.service
systemctl --user disable c2s2.service
EOF
scripts+=("${disableScript}")

# Uninstall script.

read -rd '' uninstallScript <<-EOF
#!/usr/bin/env bash

# Disables, stops, and uninstalls c2s2.

"${HOME}/.local/bin/c2s2-disable"
rm -rf "\${HOME}/.config/c2s2"
rm "\${HOME}/.config/systemd/user/c2s2.service"
rm "\${HOME}/.local/bin/c2s2-monitor"
rm "\${HOME}/.local/bin/c2s2-update"
rm "\${HOME}/.local/bin/c2s2-enable"
rm "\${HOME}/.local/bin/c2s2-disable"
rm "\${HOME}/.local/bin/c2s2-uninstall"
EOF
scripts+=("${uninstallScript}")

# Light mode configuration script.

read -rd '' lightModeConfigurationScript <<-EOF
#!/usr/bin/env bash

# Light mode configuration script
#
# Add app configurations here from:
# https://codeberg.org/small-tech/c2s2/src/configurations.md

echo '[c2s2] Switching to light mode.'
EOF
scripts+=("${lightModeConfigurationScript}")

# Dark mode configuration script.

read -rd '' darkModeConfigurationScript <<-EOF
#!/usr/bin/env bash

# Dark mode configuration script
#
# Add app configurations here from:
# https://codeberg.org/small-tech/c2s2/src/configurations.md

echo '[c2s2] Switching to dark mode.'
EOF
scripts+=("${darkModeConfigurationScript}")

# Systemd unit.

read -rd '' systemdUnit <<-EOF
[Unit]
Description=Console Colour Scheme Synchroniser (c2s2)
Documentation=https://codeberg.org/small-tech/c2s2/src/README.md
After=gnome-session.target

[Service]
Type=simple
RestartSec=5
Restart=always
ExecStart=%h/.local/bin/c2s2-monitor

[Install]
WantedBy=gnome-session.target
EOF

# Directory paths.

binaryDirectory="${HOME}/.local/bin"
configurationDirectory="${HOME}/.config/c2s2"
systemdUserDirectory="${HOME}/.config/systemd/user"

# Script paths.

scriptPaths=()
scriptPaths+=("${binaryDirectory}/c2s2-monitor")   # monitor script
scriptPaths+=("${binaryDirectory}/c2s2-update")    # update script
scriptPaths+=("${binaryDirectory}/c2s2-enable")    # enable script
scriptPaths+=("${binaryDirectory}/c2s2-disable")   # disable script
scriptPaths+=("${binaryDirectory}/c2s2-uninstall") # uninstall script
scriptPaths+=("${configurationDirectory}/light")   # light mode configuration script
scriptPaths+=("${configurationDirectory}/dark")    # dark mode configuration script

systemdUnitPath="${systemdUserDirectory}/c2s2.service"

echo "  - Ensuring directories exist"

# Ensure the directories we need exist.
mkdir -p "${binaryDirectory}"
mkdir -p "${configurationDirectory}"
mkdir -p "${systemdUserDirectory}"

echo "  - Writing script files and ensuring theyâ€™re executable"

numberOfScripts=${#scripts[@]}
for (( i=0; i<numberOfScripts; i++ ));
do
  scriptPath="${scriptPaths[$i]}"
  echo "${scripts[$i]}" > "${scriptPath}"
  chmod +x "${scriptPath}"
done

echo " -- Writing systemd unit file"

echo "${systemdUnit}" > "${systemdUnitPath}"

echo " -- Enabling c2s2 service and starting it"

c2s2-enable

echo ""
echo "Done."
echo ""
echo "Usage instructions"
echo ""
echo "To disable the service, run c2s2-disable"
echo "To re-enable the service, run c2s2-enable"
echo "To uninstall c2s2, run c2s2-uninstall"
echo ""
echo "Configure light mode settings in ~/.config/c2s2/light"
echo "Configure dark mode settings in ~/.config/c2s2/dark"
echo ""
echo "Get app configurations from:"
echo "https://codeberg.org/small-tech/c2s2/src/configurations.md"
echo ""
echo "Enjoy!"
echo ""
echo "ðŸ’• Small Technology Foundation"
echo "https://small-tech.org"
echo ""
