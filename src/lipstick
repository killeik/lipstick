#!/usr/bin/env bash

################################################################################
#
# 🐷 Lipstick on a Pig
#
# 💄 Usage: lipstick <command>
#
# For list of commands, run lipstick help.
#
# For source code, documentation, etc., please see:
# https://codeberg.org/small-tech/lipstick
#
# Copyright © 2022-present Aral Balkan, Small Technology Foundation
# License: AGPL version 3.0.
#
################################################################################

VERSION="1.0"

# If we’re being sourced instead of being launched from the command-line
# (i.e., if the first argument is not our own path), we know it’s the systemd
# service calling us and we run the sync function.

if [[ ! "${0}" =~ .*lipstick$ ]]; then
  # Called by systemd service. Run sync and exit.
  sync "${1}"
  exit
fi

# Parse command.

case $1 in
  configure     ) configure ;;
  monitor       ) monitor   ;;  # private; only used by systemd service.
  enable        ) enable    ;;
  disable       ) disable   ;;
  update        ) update    ;;
  uninstall     ) uninstall ;;
  *             ) help      ;;
esac

# Binary and configuration path usage adheres to 
# freedesktop.org XDG Base Directory Specification
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html

if test -z "${XDG_DATA_HOME}"; then
  DATA_HOME="${XDG_DATA_HOME}"
else
  DATA_HOME="${HOME}/.local/share"
fi
LIPSTICK_DATA_HOME="${DATA_HOME}/lipstick"
BINARY_HOME="${HOME}/.local/bin"


function configure {
  # Find and initialise support for all supported apps installed on this system.
  installedApps=()

  for app in ${lipstickApps[@]};
  do
    appCommand="${app}Command"
    if command -v "${!appCommand}" &> /dev/null; then
      # App is installed.
      echo "  - Found app: ${app}, adding support for it"
      installedApps+=(app)
      "${app}Init"
    fi
  done

  # Save the list of installed apps.
  echo -e "#!/usr/bin/env bash\n\ninstalledApps=(${installedApps[@]})" > "${LIPSTICK_DATA_HOME}/installed-apps"
}


function monitor {
  # When system colour scheme changes, run sync script.
  gsettings monitor org.gnome.desktop.interface color-scheme \
    | xargs -L1 bash -c "source ${BINARY_HOME}/lipstick sync"
}


function sync {
  # Import list of all apps (apps), including their configuration functions,
  # as well as a list of the currently installed apps (installedApps) on this system.
  # (The latter is compiled by the lipstick-configure script run by the installer.)
  source "${LIPSTICK_DATA_HOME}/lipstick-apps"
  source "${LIPSTICK_DATA_HOME}/installed-apps"

  if [[ "${1}" == "default" ]]; then
    colourScheme="Light"
  else
    colourScheme="Dark"
  fi

  # Log the current mode to aid with troubleshooting.
  # Use journalctl --unit=lipstick.service to view the logs.
  echo "🐷 Switching to ${colourScheme} Mode."

  # Configure apps for the current colour scheme.
  for app in ${installedApps[@]};
  do
    "${app}${colourScheme}"
  done
}


function enable {
  # Enable the Lipstick monitor to start on boot, start it up immediately,
  # and also run the sync command right away.
  sync
  systemctl --user enable lipstick.service
  systemctl --user start lipstick.service
}


function disable {
  # Stop the Lipstick colour scheme change monitor service immediately and
  # disable it from starting at boot.
  systemctl --user stop lipstick.service
  systemctl --user disable lipstick.service
}


function update {
  # Update Lipstick on a Pig.
  echo "🐷 Updating Lipstick on a Pig…"

  if command -v wget &> /dev/null; then
    # Update using wget.
    wget -qO- https://codeberg.org/small-tech/lipstick/raw/branch/main/install | bash
  else
    # wget does not exist, attempt to update using curl.
    if command -v curl &> /dev/null; then
      # Update using curl.
      curl -s https://codeberg.org/small-tech/lipstick/raw/branch/main/install | bash
    else
      echo "Error: could not find wget or curl to download the update."
      echo "Please install one of these apps and re-run lipstick-update."
      exit 1
    fi
  fi

  echo "💄 Done."
}


function uninstall {
  # Uninstall Lipstick on a Pig.
  echo "🐷 Uninstalling Lipstick on a Pig…"

  disable

  rm -rf "${CONFIG_HOME}/lipstick"
  rm "${CONFIG_HOME}/systemd/user/lipstick.service"
  rm "${BINARY_HOME}/lipstick"
  
  echo "💄 Done."
}


function help {
  echo ""
  echo "🐷 Lipstick on a Pig version ${VERSION}"
  echo ""
  echo "Usage: lipstick <command>"
  echo ""
  echo "Commands:"
  echo ""
  echo "configure: update config (e.g., after installing a new app)"
  echo "update   : update to latest version of Lipstick on a Pig."
  echo "enable   : enable and start the systemd service"
  echo "disable  : disable and stop the systemd service"
  echo "uninstall: uninstall Lipstick on a Pig."
  echo ""
  echo "To access source code, file an issue, etc., please see:"
  echo "https://codeberg.org/small-tech/lipstick"
  echo ""
  echo "💄 Enjoy!"
  echo ""
  echo "💕 Like this? Fund us!"
  echo "   https://small-tech.org/fund-us"
  echo ""
  echo "Copyright 2022-present Aral Balkan, Small Technology Foundation"
  echo "Released under AGPL version 3.0"
  echo ""
}
