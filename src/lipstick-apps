#!/usr/bin/env bash

# Defines apps that Lipstick supports.
#
# App definition symbols use a naming convention based on the <appName>:
#
# apps+=(<appName>)  # Adds <appName> to list of supported apps
# <appName>Command   # (string) the name of the app binary used to check if app exists
# <appName>Init      # (function) carries out any one-time initialisation that might
#                    #   be necessary (e.g., ensuring app configuration file exists).
# <appName>Light     # (function) run to switch app to its light mode/theme.
# <appName>Dark      # (function) run to switch app to its dark mode/theme.
#
# Remember that the various functions above will be called in different processes
# so do not update global variables from within them and expect other functions for
# your app to read that value. e.g., when getting config paths from the app itself
# (see bat app for an example of this), repeat the command in each of your functions
# that needs access to that path.

# Use CONFIG_HOME as the configuration directory in app definitions.
# Adheres to freedesktop.org XDG Base Directory Specification
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

apps=()


################################################################################
#
# Helix Editor.
#
################################################################################

helixEditorCommand="hx"
helixConfigurationDirectory="${CONFIG_HOME}/helix"
helixConfigurationFile="${helixConfigurationDirectory}/config.toml"

function helixEditorInit {
  # Ensure configuration exists.
  mkdir -p "${helixConfigurationDirectory}"
  if ! test -f "${helixConfigurationFile}"; then
    echo 'theme = "default"' > "${helixConfigurationFile}"
  fi
}

function helixEditorLight {
  sed -i 's/theme = ".*"/theme = "onelight"/' "${CONFIG_HOME}/helix/config.toml"
  pkill -USR1 hx
}

function helixEditorDark {
  sed -i 's/theme = ".*"/theme = "dracula"/' "${CONFIG_HOME}/helix/config.toml"
  pkill -USR1 hx
}

apps+=("helixEditor")


################################################################################
#
# Bat
#
################################################################################

batCommand="bat"

function batInit {
  # Ensure configuration exists.
  configDirectory=`bat --config-dir`
  configFile=`bat --config-file`

  if [[ ! -f "${configFile}" ]]; then
    mkdir -p "${configDirectory}"
    echo -e "--theme=\"\"\n" > "${configFile}"
  fi
}

function batLight {
  configFile=`bat --config-file`
  sed -i 's/theme=".*"/theme="Monokai Extended Light"/' "${configFile}"
}

function batDark {
  configFile=`bat --config-file`
  sed -i 's/theme=".*"/theme="Dracula"/' "${configFile}"
}

apps+=("${batCommand}")

################################################################################
#
# Batcat (on Debian and Ubuntu, the bat binary is called batcat).
#
################################################################################

batcatCommand="batcat"

function batcatInit {
  # Ensure configuration exists.
  configDirectory=`batcat --config-dir`
  configFile=`batcat --config-file`

  if [[ ! -f "${configFile}" ]]; then
    mkdir -p "${configDirectory}"
    echo -e "--theme=\"\"\n" > "${configFile}"
  fi
}

function batcatLight {
  configFile=`batcat --config-file`
  sed -i 's/theme=".*"/theme="Monokai Extended Light"/' "${configFile}"
}

function batcatDark {
  configFile=`batcat --config-file`
  sed -i 's/theme=".*"/theme="Dracula"/' "${configFile}"
}

apps+=("${batcatCommand}")

################################################################################
#
# Delta
#
# Note: Delta does not have its own configuration file but rather uses Git’s
# ~/.gitconfig file. Updating this makes me more nervous than would a separate
# file for Delta but c’est la vie for now.
#
# For more information, see:
# https://github.com/dandavison/delta/issues/19
#
################################################################################

deltaCommand="delta"

deltaConfigFile="${HOME}/.gitconfig"

function deltaInit {
  # This is where we try to be as safe as possible so as not to mess up
  # the person’s git configuration.

  themeDefinition="[delta]\n\tsyntax-theme = Dracula"

  # If a .gitconfig file doesn’t exist, create one and add a
  # Delta section with a default theme.
  if [[ ! -f "${deltaConfigFile}" ]]; then
    echo -e "${themeDefinition}" > "${deltaConfigFile}"
    exit
  fi
  
  # Git config exists, check if there is already a syntax-theme setting.
  if grep -q "\[delta\]" ~/.gitconfig; then
    if grep -q "syntax-theme =" ~/.gitconfig; then
      # All good, everything we need exists.
      true
    else
      # Add just the syntax-theme section.
      sed -i "s/\[delta\]/${themeDefinition}/" "${deltaConfigFile}"
    fi
  else
      # [delta] section does not exist. Add it.
      echo -e "\n${themeDefinition}\n" >> "${deltaConfigFile}"
  fi
}

function deltaLight {
  sed -i 's/syntax-theme = .*$/syntax-theme = Monokai Extended Light/' "${deltaConfigFile}"
}

function deltaDark {
  sed -i 's/syntax-theme = .*$/syntax-theme = Dracula/' "${deltaConfigFile}"
}

apps+=("${deltaCommand}")
