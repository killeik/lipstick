#!/usr/bin/env bash

# Defines apps that Lipstick supports.
#
# App definition symbols use a naming convention based on the <appName>:
#
# apps+=(<appName>)  # Adds <appName> to list of supported apps
# <appName>Command   # (string) the name of the app binary used to check if app exists
# <appName>Init      # (function) carries out any one-time initialisation that might
#                    #   be necessary (e.g., ensuring app configuration file exists).
# <appName>Light     # (function) run to switch app to its light mode/theme.
# <appName>Dark      # (function) run to switch app to its dark mode/theme.
#
# Remember that the various functions above will be called in different processes
# so do not update global variables from within them and expect other functions for
# your app to read that value. e.g., when getting config paths from the app itself
# (see bat app for an example of this), repeat the command in each of your functions
# that needs access to that path.

# Use CONFIG_HOME as the configuration directory in app definitions.
# Adheres to freedesktop.org XDG Base Directory Specification
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

LIPSTICK_CONF="${CONFIG_HOME}/lipstick/lipstick.conf"

# safe bash script config file loading from
# https://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script
typeset -A config
config=(
  [batcat_dark_theme]="Dracula"
  [batcat_light_theme]="Monokai Extended Light"
  [bat_dark_theme]="Dracula"
  [bat_light_theme]="Monokai Extended Light"
  [btop_dark_theme]="dracula"
  [btop_light_theme]="adapta"
  [delta_dark_theme]="Dracula"
  [delta_light_theme]="Monokai Extended Light"
  [helix_dark_theme]="dracula"
  [helix_light_theme]="onelight"
)

# Lipstick theme override configuration file is optional
# Format should be:
# <app_name>_light_theme=my_light_theme_name
# <app_name>_dark_theme=my_dark_theme_name
if [ -f "${LIPSTICK_CONF}" ]; then
  while read -r line
  do
      if [[ "$line" == *"="* ]]; then
        var_name="${line%%=*}"
        var_value="${line#*=}"
        config["${var_name}"]="${var_value}"
      fi
  done < "${LIPSTICK_CONF}"
fi

function generateThemePattern {
  #$1 - is theme pattern, $2 - is new theme name
  pattern=$(echo "$1" |sed "s/@new_theme@/$2" )
  return "$pattern"
}

apps=()


################################################################################
#
# Helix Editor.
#
################################################################################

helixCommand="hx"

if command -v helix &>/dev/null; then
  helixCommand="helix"
fi

helixConfigurationDirectory="${CONFIG_HOME}/helix"
helixConfigurationFile="${helixConfigurationDirectory}/config.toml"
helixThemePattern='s/theme=".*"/theme="@new_theme@"/'

function helixInit {
  # Ensure configuration exists.
  mkdir -p "${helixConfigurationDirectory}"
  if ! test -f "${helixConfigurationFile}"; then
    echo 'theme = "default"' > "${helixConfigurationFile}"
  fi
}

function helixLight {
  pattern=$(generateThemePattern "$helixThemePattern" "${config[helix_light_theme]}" )
  sed -i "${pattern}" "${helixConfigurationFile}"
  pkill -USR1 ${helixCommand}
}

function helixDark {
  pattern=$(generateThemePattern "$helixThemePattern" "${config[helix_dark_theme]}" )
  sed -i "${pattern}" "${helixConfigurationFile}"
  pkill -USR1 ${helixCommand}
}

apps+=("helix")


################################################################################
#
# Bat
#
################################################################################
batCommand="bat"

if command -v batcat &>/dev/null; then
  batCommand="batcat"
fi

batThemePattern='s/theme=".*"/theme="@new_theme@"/'

# systemd unit won't be able to find `bat` command if it is in a toolbox container
# like in Fedora Silverblue, so assume default config directory and file.
if command -v ${batCommand} 2&> /dev/null; then
  batConfigDirectory=$( ${batCommand} --config-dir )
  batConfigFile=$( ${batCommand} --config-file)
else
  batConfigFile="${BAT_CONFIG_PATH:-${CONFIG_HOME}/bat/config}"
  batConfigDirectory="$(dirname "${batConfigFile}")"
fi

function batInit {
  # Ensure configuration exists.
  if [[ ! -f "${batConfigFile}" ]]; then
    mkdir -p "${batConfigDirectory}"
    echo -e "--theme=\"\"\n" > "${batConfigFile}"
  fi
}

function batLight {
  pattern=$(generateThemePattern "${batThemePattern}" "${config[bat_light_theme]}")
  sed -i "${pattern}" "${batConfigFile}"
}

function batDark {
  pattern=$(generateThemePattern "${batThemePattern}" "${config[bat_dark_theme]}")
  sed -i "${pattern}" "${batConfigFile}"
}

apps+=("bat")


################################################################################
#
# Delta
#
# Note: Delta does not have its own configuration file but rather uses Git’s
# ~/.gitconfig file. Updating this makes me more nervous than would a separate
# file for Delta but c’est la vie for now.
#
# For more information, see:
# https://github.com/dandavison/delta/issues/19
#
################################################################################

deltaCommand="delta"

deltaConfigFile="${HOME}/.gitconfig"
deltaThemePattern='s/syntax-theme = .*$/syntax-theme = @new_theme@/'

function deltaInit {
  # This is where we try to be as safe as possible so as not to mess up
  # the person’s git configuration.

  themeDefinition="[delta]\n\tsyntax-theme = Dracula"

  # If a .gitconfig file doesn’t exist, create one and add a
  # Delta section with a default theme.
  if [[ ! -f "${deltaConfigFile}" ]]; then
    echo -e "${themeDefinition}" > "${deltaConfigFile}"
    exit
  fi
  
  # Git config exists, check if there is already a syntax-theme setting.
  if grep -q "\[delta\]" ~/.gitconfig; then
    if grep -q "syntax-theme =" ~/.gitconfig; then
      # All good, everything we need exists.
      true
    else
      # Add just the syntax-theme section.
      sed -i "s/\[delta\]/${themeDefinition}/" "${deltaConfigFile}"
    fi
  else
      # [delta] section does not exist. Add it.
      echo -e "\n${themeDefinition}\n" >> "${deltaConfigFile}"
  fi
}

function deltaLight {
  pattern=$(generateThemePattern "${deltaThemePattern}" "${config[delta_light_theme]}" )
  sed -i "${pattern}" "${deltaConfigFile}"
}

function deltaDark {
  pattern=$(generateThemePattern "${deltaThemePattern}" "${config[delta_dark_theme]}" )
  sed -i "${pattern}" "${deltaConfigFile}"
}

apps+=("delta")


################################################################################
#
# btop process monitor
#
################################################################################

btopCommand="btop"
btopConfigurationDirectory="${CONFIG_HOME}/btop"
btopConfigurationFile="${btopConfigurationDirectory}/btop.conf"
btopThemePattern='s/color_theme = ".*"/color_theme = "@new_theme@"/'

function btopInit {
  # Ensure configuration exists.
  mkdir -p "${btopConfigurationDirectory}"
  if ! test -f "${btopConfigurationFile}"; then
    echo 'color_theme = "default"' > "${btopConfigurationFile}"
  fi
}

function btopLight {
  pattern=$(generateThemePattern "${btopThemePattern}" "${config[btop_light_theme]}")
  sed -i "${pattern}" "${btopConfigurationFile}"
  pkill -USR2 ${btopCommand}
}

function btopDark {
  pattern=$(generateThemePattern "${btopThemePattern}" "${config[btop_dark_theme]}")
  sed -i "${pattern}" "${btopConfigurationFile}"
  pkill -USR2 ${btopCommand}
}

apps+=("btop")
